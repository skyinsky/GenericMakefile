#### PROJECT SETTINGS ####
# The version of the library
VERSION_MAJOR := 0
VERSION_MINOR := 0
VERSION_PATCH := 0
VERSION_STRING:= $(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH)
# The name of the executable to be created
LIB_NAME  := hello
SLIB_NAME := $(LIB_NAME).a
DLIB_NAME := $(LIB_NAME).so.$(VERSION_STRING)
# Compiler used
CC ?= gcc
# Archive used
AR ?= ar
# Extension of source files used in the project
SRC_EXT = c
# Path to the source directory, relative to the makefile
SRC_PATH = .
# Space-separated pkg-config libraries used by this project
LIBS =
# General compiler flags
COMPILE_FLAGS = -std=c99 -Wall -Wextra -g -fPIC
# Additional release-specific flags
RCOMPILE_FLAGS = -D NDEBUG
# Additional debug-specific flags
DCOMPILE_FLAGS = -D DEBUG
# Add additional include paths
INCLUDES = -I ./include
# General linker settings
LINK_FLAGS =
# Additional release-specific linker settings
RLINK_FLAGS = 
# Additional debug-specific linker settings
DLINK_FLAGS = 
# Destination directory, like a jail or mounted system
DESTDIR = /
# Install path (bin/ is appended automatically)
INSTALL_PREFIX = usr/local
#### END PROJECT SETTINGS ####

# Generally should not need to edit below this line

# Shell used in this makefile
# bash is used for 'echo -en'
SHELL = /bin/bash
# Clear built-in rules
.SUFFIXES:
# Programs for installation
INSTALL = install
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL) -m 644

# Append pkg-config specific libraries if need be
ifneq ($(LIBS),)
	COMPILE_FLAGS += $(shell pkg-config --cflags $(LIBS))
	LINK_FLAGS += $(shell pkg-config --libs $(LIBS))
endif

# Verbose option, to output compile and link commands
export V := false
export CMD_PREFIX := @
ifeq ($(V),true)
	CMD_PREFIX := 
endif

# Combine compiler and linker flags
release: export CFLAGS := $(CFLAGS) $(COMPILE_FLAGS) $(RCOMPILE_FLAGS)
release: export LDFLAGS := $(LDFLAGS) $(LINK_FLAGS) $(RLINK_FLAGS)
debug: export CFLAGS := $(CFLAGS) $(COMPILE_FLAGS) $(DCOMPILE_FLAGS)
debug: export LDFLAGS := $(LDFLAGS) $(LINK_FLAGS) $(DLINK_FLAGS)

# Build and output paths
release: export BUILD_PATH := build/release
release: export BIN_PATH := bin/release
debug: export BUILD_PATH := build/debug
debug: export BIN_PATH := bin/debug
install: export BIN_PATH := bin/release

# Find all source files in the source directory, sorted by most
# recently modified
SOURCES = $(shell find $(SRC_PATH)/ -name '*.$(SRC_EXT)' -printf '%T@\t%p\n' \
					| sort -k 1nr | cut -f2-)
# fallback in case the above fails
rwildcard = $(foreach d, $(wildcard $1*), $(call rwildcard,$d/,$2) \
						$(filter $(subst *,%,$2), $d))
ifeq ($(SOURCES),)
	SOURCES := $(call rwildcard, $(SRC_PATH)/, *.$(SRC_EXT))
endif

# Set the object file names, with the source directory stripped
# from the path, and the build path prepended in its place
OBJECTS = $(SOURCES:$(SRC_PATH)/%.$(SRC_EXT)=$(BUILD_PATH)/%.o)
# Set the dependency files that will be used to add header dependencies
DEPS = $(OBJECTS:.o=.d)

# Standard, non-optimized release build
.PHONY: release
release: dirs
	@echo "Beginning release build v$(VERSION_STRING)"
	@$(MAKE) all --no-print-directory

# Debug build for gdb debugging
.PHONY: debug
debug: dirs
	@echo "Beginning debug build v$(VERSION_STRING)"
	@$(MAKE) all --no-print-directory

# Create the directories used in the build
.PHONY: dirs
dirs:
	@echo "Creating directories"
	@mkdir -p $(dir $(OBJECTS))
	@mkdir -p $(BIN_PATH)

# Installs to the set path
.PHONY: install
install:
	@echo "Installing to $(DESTDIR)$(INSTALL_PREFIX)/lib"
	@$(RM) $(DESTDIR)$(INSTALL_PREFIX)/lib/$(LIB_NAME).*
	@$(RM) $(DESTDIR)$(INSTALL_PREFIX)/include/$(LIB_NAME)
	@$(INSTALL_PROGRAM) $(BIN_PATH)/$(LIB_NAME).* $(DESTDIR)$(INSTALL_PREFIX)/lib \
		&& cd $(DESTDIR)$(INSTALL_PREFIX)/lib \
		&& ln -s $(DLIB_NAME) $(LIB_NAME).so \
		&& ln -s $(DLIB_NAME) $(LIB_NAME).so.$(VERSION_MAJOR) \
		&& cd - > 0
	@echo "Installing to $(DESTDIR)$(INSTALL_PREFIX)/include"
	@cp -r include/* $(DESTDIR)$(INSTALL_PREFIX)/include
	@echo "Installed success"

# Uninstalls the program
.PHONY: uninstall
uninstall:
	@echo "Removing $(DESTDIR)$(INSTALL_PREFIX)/lib/$(LIB_NAME)"
	@$(RM) $(DESTDIR)$(INSTALL_PREFIX)/lib/$(LIB_NAME).*
	@$(RM) $(DESTDIR)$(INSTALL_PREFIX)/include/$(LIB_NAME)

# Removes all build files
.PHONY: clean
clean:
	@echo "Deleting $(LIB_NAME) symlink"
	@$(RM) $(LIB_NAME).*
	@echo "Deleting directories"
	@$(RM) -r build
	@$(RM) -r bin

# Main rule, checks the executable and symlinks to the output
all: $(BIN_PATH)/$(LIB_NAME)
	@echo "Making symlink: $(LIB_NAME) -> $<"
	@$(RM) $(LIB_NAME).*
	@ln -s $(BIN_PATH)/$(SLIB_NAME) $(LIB_NAME).a
	@ln -s $(BIN_PATH)/$(DLIB_NAME) $(LIB_NAME).so
	@ln -s $(BIN_PATH)/$(DLIB_NAME) $(LIB_NAME).so.$(VERSION_MAJOR)

# Link the executable
$(BIN_PATH)/$(LIB_NAME): $(OBJECTS)
	@echo "Linking: $@"
	$(CMD_PREFIX)$(CC) -shared $(OBJECTS) $(LDFLAGS) -o $@.so.$(VERSION_STRING)
	$(CMD_PREFIX)$(AR) -cvq $@.a $(OBJECTS)

# Add dependency files, if they exist
-include $(DEPS)

# Source file rules
# After the first compilation they will be joined with the rules from the
# dependency files to provide header dependencies
$(BUILD_PATH)/%.o: $(SRC_PATH)/%.$(SRC_EXT)
	@echo "Compiling: $< -> $@"
	$(CMD_PREFIX)$(CC) $(CFLAGS) $(INCLUDES) -MP -MMD -c $< -o $@

